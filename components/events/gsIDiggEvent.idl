/***** BEGIN LICENSE BLOCK *****

Copyright (c) 2008, Digg Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.
* Neither the name of Digg Inc. nor the names of its contributors may be used to
endorse or promote products derived from this software without specific prior
written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

***** END LICENSE BLOCK *****/

#include "nsISupports.idl"
interface gsIDiggStoryDTO;
interface gsIDiggCommentDTO;
interface gsIDiggAdminMessageDTO;

/**
 * Digg Event object. Stores information common to any Digg event (story,
 * friend activity).
 */
[scriptable, uuid(AC27F515-8BA2-405D-85F3-AFC0307F4C17)]
interface gsIDiggEvent : nsISupports
{
  /* Value for type "popular story" */
  const unsigned short EVENT_TYPE_STORY = 1;
  /* Value for type "friend submission" */
  const unsigned short EVENT_TYPE_FRIEND_SUBMISSION = 2;
  /* Value for type "friend commented something" */
  const unsigned short EVENT_TYPE_FRIEND_COMMENT = 3;
  /* Value for type "friend dugg something" */
  const unsigned short EVENT_TYPE_FRIEND_DIGG = 4;
  /* Value for type "administration message" */
  const unsigned short EVENT_TYPE_ADMIN_MESSAGE = 5;

  /* Id of the event */
  attribute AUTF8String id;
  /* Type of the event */
  attribute unsigned short type;
  /* Target url to be opened by the event */
  attribute AUTF8String href;
  /* The event direct link URL */
  attribute AUTF8String link;
  /* Domain of the link URL */
  readonly attribute AUTF8String domain;
  /* Date of the event */
  attribute unsigned long date;
  /* Event title */
  attribute AUTF8String title;
  /* Event description */
  attribute AUTF8String description;
  /* Event story topic */
  attribute AUTF8String topic;
  /* Event story media */
  attribute AUTF8String media;
  /* URL of the event's image */
  attribute AUTF8String imageURL;
  /* User name of the user who submitted the story */
  attribute AUTF8String user;
  /* Number of diggs */
  attribute short diggs;
  /* Number of comments */
  attribute short comments;
  /* Friend user names (comma-separated) related with the event */
  attribute AUTF8String friends;

  /**
   * Populates the event object with the information from a story.
   * @param aStoryDTO The storyDTO object used to populate the event.
   * @param aEventType The type of this event object.
   * @throws Exception if aStoryDTO is invalid.
   */
  void populateFromStory(
    in gsIDiggStoryDTO aStoryDTO, in unsigned short aEventType);

  /**
   * Populates the event object with the information from a story.
   * @param aStoryDTO The storyDTO object used to populate the event.
   * @param aEventType The type of this event object.
   * @throws Exception if either aCommentDTO or aStoryDTO are invalid.
   */
  void populateFromStoryComment(
    in gsIDiggStoryDTO aStoryDTO, in gsIDiggCommentDTO aCommentDTO);

  /**
   * Populates the event object with the information from an administration
   * message.
   * @param aMessageDTO The AdminMessageDTO object used to populate the event.
   * @throws Exception if aMessageDTO is invalid.
   */
  void populateFromAdminMessage(in gsIDiggAdminMessageDTO aMessageDTO);
};
