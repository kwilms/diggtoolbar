/**
 * Copyright Â© 2007 Glaxstar Ltd. All rights reserved.
 */

#include "nsISupports.idl"

interface gsICMTransferObject;
interface gsICMErrorHandler;
interface gsICMLoadHandler;

/**
 * Represents the common Glaxstar server API. Every method in this object
 * corresponds one to one to server calls.
 */
[scriptable, uuid(351C3F57-12DD-4D36-B84F-691BB7981038)]
interface gsICommonAPI : nsISupports
{
  /**
   * Pings the server. This is only meant to see if the API is alive an well.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void ping(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Obtains a CAPTCHA image from the server.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void getCaptcha(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Creates a new account.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void createAccount(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Confirms a newly created account.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void confirmAccount(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Associates an account with a realm.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void joinRealm(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Obtains detailed information on an account.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void getAccount(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Updates account information on the server.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void updateAccount(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Can be called to obtain a session for a helper. It requires the helper's
   * user name and password. It returns user account information and all user
   * UUIDs for which user is administrator.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   *   API parameters
   *     credentials[user_name] Required
   *     credentials[password] Required
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void login(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Can be called to obtain a session for a helper. It requires a previously
   * obtained session id.
   * @param aSendData the data to send to the server. Should be null if no data
   * needs to be sent.
   *   API parameters
   *     credentials[session] Required. The session id to authenticate.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void loginBySession(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  // Message methods.
  /**
   * Can be called to retrieve the list messages
   * @param aSendData the data to send to the server.
   * API parameters
   *  credentials[session] Required
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void listMessages(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Removes(Ignores) a message from the user's message queue.
   * @param aSendData the data to send to the server.
   * API parameters
   *  credentials[session] Required. The session of the user.
   *  message[msg_uuid] Required. The id of the message.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void ignoreMessage(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);

  /**
   * Removes(Closes) a message from the user's message queue.
   * @param aSendData the data to send to the server.
   * API parameters
   *  credentials[session] Required. The session of the user.
   *  message[msg_uuid] Required. The id of the message.
   * @param aLoadHandler the load handler for the API call.
   * @param aErrorHandler the error handler for the API call.
   * @throws Exception if any of the arguments is invalid, or the call fails
   * before it's sent.
   */
  void closeMessage(
    in gsICMTransferObject aSendData, in gsICMLoadHandler aLoadHandler,
    in gsICMErrorHandler aErrorHandler);
};
