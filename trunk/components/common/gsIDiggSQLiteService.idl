/***** BEGIN LICENSE BLOCK *****

Copyright (c) 2008, Digg Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.
* Neither the name of Digg Inc. nor the names of its contributors may be used to
endorse or promote products derived from this software without specific prior
written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

***** END LICENSE BLOCK *****/

#include "nsISupports.idl"
interface nsIArray;
interface mozIStorageStatement;

/**
 * SQLite service
 * Manages sqlite operations
 */
[scriptable, uuid(80e16390-fb5c-11dc-95ff-0800200c9a66)]
interface gsIDiggSQLiteService : nsISupports
{
  /* Whether the database existed when the service was initialized */
  readonly attribute boolean databaseExisted;

  /**
   * Creates a query statement based on the given string.
   * @param aQueryString The query string.
   * @return The query statement.
   */
  mozIStorageStatement createStatement(in AUTF8String aQueryString);

  /**
   * Executes a non query statement.
   * @param aQueryStatement The query statement to be executed.
   * @return The last inserted row id.
   */
  PRUint32 executeNonQuery(in mozIStorageStatement aQueryStatement);

  /**
   * Executes a query statement.
   * @param aQueryStatement The query statement to be executed.
   * @return The resulting set from the query.
   */
  nsIArray executeQuery(in mozIStorageStatement aQueryStatement);

  /**
   * Checks if a column exists in the specified table.
   * @param aTable The table where to look for the column.
   * @param aColumn The column to look for in the table.
   * @return True if exists, false otherwise.
   */
  boolean existsColumnInTable(in AUTF8String aTable, in AUTF8String aColumn);

  /**
   * Closes the database connection. Note that this won't work as expected in
   * versions before Firefox 3.
   */
  void closeConnection();
};
