/***** BEGIN LICENSE BLOCK *****

Copyright (c) 2008, Digg Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.
* Neither the name of Digg Inc. nor the names of its contributors may be used to
endorse or promote products derived from this software without specific prior
written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

***** END LICENSE BLOCK *****/

#include "nsISupports.idl"
interface gsIDiggEvent;

/**
 * Manages events stored in the database.
 */
[scriptable, uuid(F9B6FD93-DB1B-416E-BB8E-74B530C7E365)]
interface gsIDiggEventDAO : nsISupports
{
  /**
   * Inserts an event in the database.
   * @param aEvent The event object to be inserted.
   * @return True if the event was inserted, false otherwise.
   * @throws Exception if the event is invalid.
   */
  boolean insertEvent(in gsIDiggEvent aEvent);

  /**
   * Deletes an event from the database.
   * @param aEvent The event to be deleted.
   * @throws Exception if aEvent is invalid.
   */
  void deleteEvent(in gsIDiggEvent aEvent);

  /**
   * Obtains the event object at the given index.
   * @param aIndex The index of the event to obtain.
   * @return The event at the given index. Null if no event is found.
   */
  gsIDiggEvent getEventAtIndex(in short aIndex);

  /**
   * Obtains the current number of events stored in the database.
   * @return The number of events.
   */
  unsigned short getEventCount();

  /**
   * Truncates the event table from the database.
   */
  void clearEvents();
};
